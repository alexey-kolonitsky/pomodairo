<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ns1="com.pomodairo.components.*"
	showFlexChrome="false" layout="absolute"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	height="150" width="400"
	backgroundColor="#292929"
	showStatusBar="false"
	title="{timerCanvas.appTitle}"
	initialize="beforeInit()"
	creationComplete="init()"
	closing="beforeClose()"
	windowResize="resizeHandler(event)"
	close="shutdown()">

    <mx:Style source="/../../Pomodairo/src/style/style.css" />
	
	<mx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;

			import com.pomodairo.Pomodoro;
			import com.pomodairo.PomodoroEventDispatcher;
			import com.pomodairo.TaskManager;
			import com.pomodairo.components.PomoItemInput;
			import com.pomodairo.components.StatisticsWindow;
			import com.pomodairo.components.config.AboutPanel;
			import com.pomodairo.components.config.AdvancedConfigPanel;
			import com.pomodairo.components.config.BaseConfigPanel;
			import com.pomodairo.components.config.ConfigPanel;
			import com.pomodairo.components.config.ConfirmPanel;
			import com.pomodairo.components.config.SoundConfigPanel;
			import com.pomodairo.components.config.TimingConfigPanel;
			import com.pomodairo.components.config.TwitterConfigPanel;
			import com.pomodairo.db.Storage;
			import com.pomodairo.events.ConfigurationUpdatedEvent;
			import com.pomodairo.events.GuiChangeEvent;
			import com.pomodairo.events.PomodoroEvent;
			import com.pomodairo.twitter.TwitterManager;

            import mx.controls.Menu;

            import mx.core.IFlexDisplayObject;

			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;


            public static const MIN_WIDTH:Number = 400;

            public static const MINI_HEIGHT:Number = 52;
            public static const SHORT_HEIGHT:Number = 150;
            public static const FULL_HEIGHT:Number = SHORT_HEIGHT + 300;

			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();

			private var taskManager:TaskManager = TaskManager.instance;

			private var twitterManager:TwitterManager = new TwitterManager();

			private function beforeInit():void {
				PomodoroEventDispatcher.getInstance().addEventListener(ConfigurationUpdatedEvent.UPDATED, onConfigurationChange);

				var remember:Boolean = Storage.instance.config[ConfigPanel.REMEMBER_POSITION] == "true";
				if (remember)
				{
					var setX:Number = Storage.instance.config["window.x"];
					var setY:Number = Storage.instance.config["window.y"];
					if (setX >= 0 && setX < Capabilities.screenResolutionX) {
						this.nativeWindow.x = setX;
					}
					if (setY >= 0 && setY < Capabilities.screenResolutionY) {
						this.nativeWindow.y = setY;
					}
				}

				var setHeight:Number = Storage.instance.config["window.height"];
				if (setHeight >= MINI_HEIGHT && setHeight < Capabilities.screenResolutionY)
				{
					this.height = setHeight;
				}

				var setWidth:Number = Storage.instance.config["window.width"];
				if (setWidth >= MIN_WIDTH && setHeight < Capabilities.screenResolutionX)
				{
					this.width = setWidth;
				}

				dialogList[CONFIG_DIALOG_ID] = new ConfigPanel();
				dialogList[ADVANCED_DIALOG_ID] = new AdvancedConfigPanel();
				dialogList[SOUND_DIALOG_ID] = new SoundConfigPanel();
				dialogList[TIMING_DIALOG_ID] = new TimingConfigPanel();
				dialogList[ABOUT_DIALOG_ID] = new AboutPanel();
				dialogList[CONFIRM_DIALOG_ID] = new ConfirmPanel();
			}

        	private function init():void {
        		checkForUpdates();
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.START_POMODORO, closeTaskList);
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.SELECTED, onPomodoroSelected);
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.TIME_OUT, onPomodoroTimeout);
				PomodoroEventDispatcher.getInstance().addEventListener(GuiChangeEvent.UPDATED, onGuiChange);

				dialogList[TWITTER_DIALOG_ID] = new TwitterConfigPanel();

				// Display task list on startup
				toggleTaskList();
        	}

        	private function checkForUpdates():void {
				appUpdater.configurationFile = new File("app:/updateConfig.xml");
				appUpdater.isCheckForUpdateVisible = false;
				appUpdater.addEventListener(UpdateEvent.INITIALIZED,
				updaterInitialised);
				appUpdater.initialize();
			}

			private function updaterInitialised(event:UpdateEvent):void {
				appUpdater.checkNow();
			}

			private function onConfigurationChange(e:ConfigurationUpdatedEvent):void {
        		trace("Configuration change: "+e.configElement.name +" -> "+e.configElement.value);
				if (e.configElement.name == ConfigPanel.ALWAYS_ON_TOP)
				{
					this.alwaysInFront = e.configElement.value == "true";
				}
			}

			private function shutdown():void
			{
				twitterManager.stop();
			}

        	private function onPomodoroTimeout(event:PomodoroEvent):void {
        		nativeWindow.notifyUser(NotificationType.CRITICAL);
        		nativeWindow.orderToFront();
        	}

        	private function onPomodoroSelected(event:PomodoroEvent):void {
        		trace("Pomodoro selected: "+event.pomodoro.name);
        		unplannedButton.enabled = true;
        		interruptionButton.enabled = true;
        	}

            private function toggleTaskList():void {
            	if (!taskListPanel.visible) {
					taskListPanel.visible = true;
					var setHeight:Number = Storage.instance.config["window.height"];
                    setHeight = isNaN(setHeight) ? 0 : setHeight;

					this.height = setHeight > Capabilities.screenResolutionY || setHeight < FULL_HEIGHT ? FULL_HEIGHT : setHeight;
            	} else {
            		closeTaskList();
            	}
            }

            private function closeTaskList(event:PomodoroEvent=null):void {
				this.height = SHORT_HEIGHT;
				taskListPanel.visible = false;
            }

            private function newInterruption():void {
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_INTERRUPTION;
            	input.reference = taskManager.activeTask;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
            }

             private function newUnplanned():void {
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_UNPLANNED;
            	input.reference = taskManager.activeTask;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
            }

            private function beforeClose():void {
            	Storage.instance.setConfigurationValue("window.x",""+this.nativeWindow.x);
            	Storage.instance.setConfigurationValue("window.y",""+this.nativeWindow.y);
				Storage.instance.setConfigurationValue("window.height", ""+this.height);
				Storage.instance.setConfigurationValue("window.width", ""+this.width);
            }

			private function onGuiChange(event:GuiChangeEvent):void {
				if (event.miniView) {
					trace("Switch application to mini view");
					myMenuBar.visible = myMenuBar.includeInLayout = false;
					closeTaskList();
					this.height = MINI_HEIGHT;
				} else {
					trace("Switch application to regular view");
					myMenuBar.visible = myMenuBar.includeInLayout = true;
					this.height = SHORT_HEIGHT;
				}
			}

			private function toggleViewState():void {
				timerCanvas.toggleMiniView();
			}

			private function onAddPomodoroClicked(event:Event=null):void
			{
				var input:PomoItemInput = new PomoItemInput();
				input.type = Pomodoro.TYPE_POMODORO;
				input.selectAfterCreate = true;
				PopUpManager.addPopUp(input, this, true);
				PopUpManager.centerPopUp(input);
			}

			private function resizeHandler(event:Event):void
			{
				if (this.height == MINI_HEIGHT || this.height == SHORT_HEIGHT)
					return;

				var value:Number = Storage.instance.config['window.height'];
				if (this.height == value)
					return;

				Storage.instance.setConfigurationValue('window.height', ''+this.height);
			}


    		/* ----------------------------------------------------
        		MENU STUFF
	   	  	---------------------------------------------------- */

			public static const STATISTIC_DIALOG_ID:String = "statistic";

			public static const CONFIG_DIALOG_ID:String = "config";
			public static const TWITTER_DIALOG_ID:String = "twitter";
			public static const ADVANCED_DIALOG_ID:String = "advancedConfig";
			public static const SOUND_DIALOG_ID:String = "sound";
			public static const TIMING_DIALOG_ID:String = "timing";
			public static const ABOUT_DIALOG_ID:String = "about";
			public static const CONFIRM_DIALOG_ID:String = "confirm";

			private var dialogList:Object = { };
            private var myMenu:Menu;

            public var xmlMenu:XMLList = <>
                <menuitem label="Menu">
                    <menuitem label="Config">
                        <menuitem label="Configuration" action={CONFIG_DIALOG_ID}/>
                        <menuitem label="Sounds" action={SOUND_DIALOG_ID}/>
                        <menuitem label="Timing" action={TIMING_DIALOG_ID}/>
                        <menuitem label="Twitter" action={TWITTER_DIALOG_ID}/>
                        <menuitem label="Advanced" action={ADVANCED_DIALOG_ID}/>
                    </menuitem>
                    <menuitem label="Statistics" action={STATISTIC_DIALOG_ID}/>
                    <menuitem label="Pomodairo" action={ABOUT_DIALOG_ID}/>
                </menuitem>
            </>;

            private function showMenu(event:MouseEvent):void {
                var targetButton:Button = event.currentTarget as Button;

                // Calculate position of Menu in Application's coordinates.
                var position:Point = new Point(targetButton.x, targetButton.y + targetButton.height);
                position = targetButton.localToGlobal(position);
                position = this.globalToLocal(position);

                if (myMenu == null) {
                    myMenu = Menu.createMenu(this, xmlMenu, false);
                    myMenu.labelField = "@label";
                    myMenu.addEventListener(MenuEvent.ITEM_CLICK, menuClick);
                }
                myMenu.show(position.x, position.y);
            }

            private function menuClick(event:MenuEvent):void {
				var action:String = event.item.@action;
				switch (action)
				{
					case STATISTIC_DIALOG_ID:
						showStatisticsPanel();
						break;

					case CONFIG_DIALOG_ID:
					case TWITTER_DIALOG_ID:
					case ADVANCED_DIALOG_ID:
					case SOUND_DIALOG_ID:
					case TIMING_DIALOG_ID:
					case ABOUT_DIALOG_ID:
					case CONFIRM_DIALOG_ID:
						var dialog:IFlexDisplayObject = dialogList[action];
						showPopup(dialog);
						break;

					default:
						trace("WARNING: Dialog with unhandled menu action \"" + action + "\"");
						break;
				}
            }

            private function showStatisticsPanel():void
	        {
            	var myWindow:StatisticsWindow = new StatisticsWindow();
		      	myWindow.systemChrome = NativeWindowSystemChrome.STANDARD;
		      	myWindow.type = NativeWindowType.NORMAL;
		      	myWindow.open( true );
	        }

			private function showPopup(dialog:IFlexDisplayObject):void
			{
				if (dialog) {

					if (dialog is BaseConfigPanel) {
						var panel:BaseConfigPanel = dialog as BaseConfigPanel;
						panel.populate();
						panel.notifyConfiguration();
					}
					PopUpManager.addPopUp(dialog, this, true);
					PopUpManager.centerPopUp(dialog);
					PopUpManager.bringToFront(dialog);
				}
			}

			/* ----------------------------------------------------
    			END OF MENU STUFF
	   	  	---------------------------------------------------- */


			private function lblClose_clickHandler(event:MouseEvent):void
			{
				if (Storage.instance.config[ConfigPanel.REMEMBER_POSITION] == "false")
				{
					close();
					return;
				}

				if (timerCanvas.currentState == "minimal")
					timerCanvas.toggleMiniView();

				showPopup(dialogList[CONFIRM_DIALOG_ID]);
			}
        ]]>
    </mx:Script>

    <mx:Fade id="fadein" />
    <mx:Fade id="fadeout" />

	<s:VGroup left="0" top="0" height="{SHORT_HEIGHT}" right="0" mouseDown="{nativeWindow.startMove()}">

		<s:HGroup width="100%" height="30">
			<mx:Button id="myMenuBar" label="M" click="showMenu(event)" />
			<mx:Spacer width="100%" />
			<mx:Button label="Tasks" click="toggleTaskList()" toolTip="Open/close task list"/>
			<mx:Button label="Unplanned" id="unplannedButton" click="newUnplanned()" toolTip="Add unplanned" enabled="false"/>
			<mx:Button label="Interruption" id="interruptionButton" click="newInterruption()" toolTip="Add interruption" enabled="false"/>
			<mx:Spacer width="100%" />
			<mx:Button right="56" top="0" height="22" width="54" id="toggleViewButton" label="view" click="toggleViewState()"/>
			<mx:Button label="_" click="{minimize()}" color="#FFFFFF" />
			<mx:Button label="x" click="{lblClose_clickHandler(event)}" color="#FFFFFF"/>
		</s:HGroup>

		<ns1:timer id="timerCanvas" height="120" width="100%" pomodoroLengthInMinutes="25"/>

	</s:VGroup>

	
	<mx:Canvas id="taskListPanel" x="0" y="{SHORT_HEIGHT}" height="100%" width="100%" visible="false" showEffect="fadein" hideEffect="fadeout"
		backgroundAlpha="0">
		<ns1:TaskListCanvas x="0" y="0" height="100%" width="100%" app="{this}" />
	</mx:Canvas>
	
</mx:WindowedApplication>
