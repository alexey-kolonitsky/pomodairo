<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:s="spark.components.*" width="320" height="300"
           initialize="init()" horizontalScrollPolicy="off"
           verticalScrollPolicy="off"
           backgroundAlpha="0">
	
	<mx:Script>
		<![CDATA[
        import mx.collections.ArrayCollection;
        import mx.core.WindowedApplication;
            import mx.events.PropertyChangeEvent;
            import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import com.pomodairo.events.PomodoroEvent;
			import com.pomodairo.PomodoroEventDispatcher;
			import com.pomodairo.Pomodoro;
			import com.pomodairo.TaskManager;
			import com.pomodairo.TableUtils;
			import com.pomodairo.db.Storage;

			[Bindable]
			private var db:Storage = Storage.instance;

			[Bindable]
			private var taskMenu:NativeMenu = new NativeMenu();

			[Bindable]
			public var app:WindowedApplication;

			private var taskManager:TaskManager = TaskManager.instance;

			override protected function keyUpHandler(event:KeyboardEvent):void
			{
				switch (event.keyCode)
				{
					case Keyboard.F2:
					case Keyboard.E:
						onEditPomodoroClicked();
						break;

					case Keyboard.C:
						onCopyPomodoroClicked();
						break;

					case Keyboard.INSERT:
						onAddPomodoroClicked();
						break;

					case Keyboard.DELETE:
						onRemovePomodoroClicked();
						break;
				}
			}

			private function onCopyPomodoroClicked():void
			{
				var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
				if (pom == null) {
					trace("WARNING: TaskListCanvas.onCopyPomodoroClicked: Pomodoro is not selected");
					return;
				}

				System.setClipboard(pom.name);
			}

			private function init():void {
				db.initAndOpenDatabase();
				populateTaskMenu();
				pomodorosDataGrid.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
                db.addEventListener(Storage.DATASET_CHANGED, dataset_changedHandler);
                pomodorosDataGrid.dataProvider = new ArrayCollection(db.dataset);
			}

            private function dataset_changedHandler(event:Event):void {
                pomodorosDataGrid.dataProvider = new ArrayCollection(db.dataset);
            }
			private function populateTaskMenu():void
			{
				var menuitem:NativeMenuItem = new NativeMenuItem("Show...");
     			menuitem.addEventListener(Event.SELECT, showName);
				taskMenu.addItem(menuitem);

				var edit:NativeMenuItem = new NativeMenuItem("Edit...");
     			edit.addEventListener(Event.SELECT, onEditPomodoroClicked);
				taskMenu.addItem(edit);

				var done:NativeMenuItem = new NativeMenuItem("Mark/unmark done");
     			done.addEventListener(Event.SELECT, onDonePomodoroClicked);
				taskMenu.addItem(done);

				var remove:NativeMenuItem = new NativeMenuItem("Remove");
     			remove.addEventListener(Event.SELECT, onRemovePomodoroClicked);
				taskMenu.addItem(remove);

				// Separator by last task based menu item. Menu items below are for 'all'
				taskMenu.addItem(new NativeMenuItem("", true));

				var clean:NativeMenuItem = new NativeMenuItem("Clean all done");
     			clean.addEventListener(Event.SELECT, onClosePomodoroClicked);
				taskMenu.addItem(clean);

				var copy:NativeMenuItem = new NativeMenuItem("Copy to clipboard");
     			copy.addEventListener(Event.SELECT, copyTableToClipboard);
				taskMenu.addItem(copy);

			}

			private function onUsersDataGridChanged(event:Event):void{}

			private function onDragComplete(event:Event):void
			{
				updatePrios();
			}

			private function updatePrios():void
			{
				var i:int = pomodorosDataGrid.selectedIndex - 1;
				for each (var pom:Pomodoro in pomodorosDataGrid.dataProvider) {
					pom.ordinal = i--;
					db.updateOrdinal(pom);
				}
			}

			private function onRemovePomodoroClicked(event:Event=null):void
			{
				var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
				if (pom == null) {
					trace("WARNING: TaskListCanvas.onEditPomodoroClicked: Pomodoro is not selected");
					return;
				}

				db.remove(pom);

				if (taskManager.activeTask && taskManager.activeTask.id == pom.id)
					findNextTask();
			}

			private function onAddPomodoroClicked(event:Event=null):void
			{
				var input:PomoItemInput = new PomoItemInput();
				input.type = Pomodoro.TYPE_POMODORO;
				input.selectAfterCreate = true;
				PopUpManager.addPopUp(input, this, true);
				PopUpManager.centerPopUp(input);
			}

			private function onEditPomodoroClicked(event:Event=null):void
			{
				var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
				if (pom == null) {
					trace("WARNING: TaskListCanvas.onEditPomodoroClicked: Pomodoro is not selected");
					return;
				}
				var input:PomoItemInput = new PomoItemInput();
				input.type = Pomodoro.TYPE_EDIT;
				input.selectAfterCreate = true;
				input.reference = pom;
				PopUpManager.addPopUp(input, this, true);
				PopUpManager.centerPopUp(input);
			}

			private function onStartPomodoroClicked(event:Event=null):void
			{
				var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
				if (pom) {
					var evt:PomodoroEvent = new PomodoroEvent(PomodoroEvent.SELECTED);
					evt.pomodoro = pom;
					PomodoroEventDispatcher.getInstance().dispatchEvent(evt);
				} else {
					trace("TaskListCanvas onStartPomodoroClicked pomodoro not selected");
				}
			}

	        private function onDonePomodoroClicked(event:Event=null):void
	        {
	        	if (!pomodorosDataGrid.selectedItem) return;

				var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
				if (pom.done) {
					pom.closed = null;
				}
				else {
					pom.closed = new Date();
				}
				pom.done = !pom.done;
				// Following is done by event listener in db object.
				// db.markDone(pom);
				// Dispatch event.
				var evt:PomodoroEvent = new PomodoroEvent(PomodoroEvent.DONE);
				evt.pomodoro = pom;
				PomodoroEventDispatcher.getInstance().dispatchEvent(evt);

				findNextTask();
			}

			private function findNextTask():void
			{
				var result:Boolean = taskManager.nextTask();
				if (result == false) {
					var emptyListEvent:PomodoroEvent = new PomodoroEvent(PomodoroEvent.LIST_EMPTY);
					PomodoroEventDispatcher.getInstance().dispatchEvent(emptyListEvent);
				}
			}

	        private function onClosePomodoroClicked(event:Event=null):void
	        {
				for each (var pom:Pomodoro in db.dataset) {
					if (pom.done) {
			        	pom.visible = false;
			        	db.updateVisibility(pom);
		   			}
				}
	        }

			public function copyTableToClipboard(event:Event=null):void
			{
				var data:Array = db.dataset;
				var tmpString:String = new TableUtils().getPomodorosTableAsCsv(data);
				System.setClipboard(tmpString);
			}


			private function displayMenu(evt:Event):void
			{
				pomodorosDataGrid.selectedIndex = lastRollOverIndex;
				var loc:Point = contentToGlobal(new Point(contentMouseX, contentMouseY));
        		taskMenu.display(this.stage, loc.x, loc.y);
			}

			private function showName(evt:Event):void
			{
				var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
				Alert.show("Name: " + pom.name+"\nEstimated: "+pom.estimated+"\nWorked: "+pom.pomodoros+"\nInterruptions: "+pom.interruptions);
			}

			private var clickX:Number;
			private var clickY:Number;
			private var isResizing:Boolean;
			private var windowOriginHeight:Number;

			private var cursorId:int;

			private function resizeLine_mouseDownHandler(event:MouseEvent):void {
				clickX = event.stageX;
				clickY = event.stageY;
				stage.addEventListener(MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler)
				stage.addEventListener(MouseEvent.MOUSE_UP, stage_mouseUpHandler);
			}

			private function stage_mouseUpHandler(event:MouseEvent):void {
				stage.removeEventListener(MouseEvent.MOUSE_UP, stage_mouseUpHandler);
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler);
				clickX = 0.0;
				clickY = 0.0;
				windowOriginHeight = 0.0;
				isResizing = false;
				setDefaultCursor();
			}

			private function stage_mouseMoveHandler(event:MouseEvent):void {
				var dy:Number = event.stageY - clickY;
				if (dy * dy > 25 && isResizing == false) {
					isResizing = true;
					windowOriginHeight = app.nativeWindow.height;
				}

				if (isResizing) {
					app.nativeWindow.height = windowOriginHeight + dy;
				}
			}

			[Embed(source="/style/kingnarestyle.swf", symbol="DividedBox_verticalCursor")]
			public static const ResizeCursorClass:Class;

			private function resizeLine_rollOverHandler(event:MouseEvent):void {
				cursorId = cursorManager.setCursor(ResizeCursorClass);
			}

			private function resizeLine_rollOutHandler(event:MouseEvent):void {
				if (isResizing == false) {
					setDefaultCursor();
				}
			}

			private function setDefaultCursor():void
			{
				cursorManager.removeAllCursors();
				cursorId = -1;
			}
		]]>
	</mx:Script>
	
	<mx:Number id="lastRollOverIndex" />

	<s:List id="pomodorosDataGrid"
		top="0" right="0" bottom="44" left="0"
		rightClick="displayMenu(event);"
        itemRenderer="com.pomodairo.components.PomodoroListRenderer"
		itemRollOver="lastRollOverIndex = event.itemIndex"
		click="onStartPomodoroClicked(event);"
        contentBackgroundAlpha="0"
		dragMoveEnabled="true"
		dragEnabled="true"
		dropEnabled="true"
		dragComplete="onDragComplete(event)"
		change="onUsersDataGridChanged(event)" width="100%">
	</s:List>

	<mx:Canvas id="resizeLine" bottom="0" left="0" right="0" height="44"
		backgroundColor="0xFFFFFF" backgroundAlpha="0.2"
		mouseDown="resizeLine_mouseDownHandler(event)"
		rollOver="resizeLine_rollOverHandler(event)"
		rollOut="resizeLine_rollOutHandler(event)"/>
	
	<mx:Button id="addPomoButton" label="Add New" click="onAddPomodoroClicked()" width="91" height="24" right="10" bottom="10"/>

</mx:Canvas>