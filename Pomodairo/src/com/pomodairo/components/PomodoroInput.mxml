<?xml version="1.0"?>
<!--
  Created by akalanitski on 11.12.2016.
-->
<s:Group
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:s="library://ns.adobe.com/flex/spark"
    creationComplete="init()">

    <fx:Script><![CDATA[
        import com.pomodairo.EmbedStyle;
        import com.pomodairo.core.PomodoroEventDispatcher;
        import com.pomodairo.core.Storage;
        import com.pomodairo.data.Pomodoro;
        import com.pomodairo.events.PomodoroEvent;

        public var descriptionInstructions:String = "Enter description (press escape to cancel)";
        public var estimateInstructions:String = "Enter estimate (press escape to cancel)";


        public var selectAfterCreate:Boolean = false;

        public var type:String = Pomodoro.TYPE_POMODORO;
        public var reference:Pomodoro;

        [Bindable]
        public var currentText:String = descriptionInstructions;

        private function init():void {
            if (type == Pomodoro.TYPE_INTERRUPTION) {
                input.width = 236;
                estimatedInput.visible = false;
            }
            else {
                input.width = 192;
                estimatedInput.visible = true;
            }

            if (type == Pomodoro.TYPE_EDIT) {
                input.text = reference.name;
                estimatedInput.text = "" + reference.estimated as String;
            }

            estimatedInput.addEventListener(KeyboardEvent.KEY_DOWN, checkSubmit);
            input.addEventListener(KeyboardEvent.KEY_DOWN, checkSubmit);
            input.setFocus();
        }


        private function descriptionFocus(event:Event = null):void {
            currentText = descriptionInstructions;
        }

        private function estimateFocus(event:Event = null):void {
            currentText = estimateInstructions;
        }


        private function fireSubmit(event:Event):void {
            if (input.text == null || input.text == "") {
                exit();
                return;
            }

            var item:Pomodoro = new Pomodoro();
            item.name = input.text;

            if (reference != null) {
                item.parent = reference.id;
            } else {
                item.parent = 0;
            }
            item.type = type;
            item.estimated = int(estimatedInput.text);

            var eventType:String;
            switch (type) {
                case Pomodoro.TYPE_POMODORO:
                    eventType = PomodoroEvent.NEW_POMODORO;
                    break;

                case Pomodoro.TYPE_UNPLANNED:
                    eventType = PomodoroEvent.NEW_UNPLANNED;
                    break;

                case Pomodoro.TYPE_INTERRUPTION:
                    eventType = PomodoroEvent.NEW_INTERRUPTION;
                    break;

                case Pomodoro.TYPE_EDIT:
                    eventType = PomodoroEvent.EDITED;
                    break;
            }

            var evt:PomodoroEvent = new PomodoroEvent(eventType);
            evt.pomodoro = reference;
            evt.other = item;

            PomodoroEventDispatcher.instance.dispatchEvent(evt);
            exit();

            if (selectAfterCreate) {
                // Ugh.. Don't get me started. Fugly warning ahead!
                // 1. The pomodoro.id is not set since the insert must be run
                // and the item read from the db again.
                // 2. The db does not have a easy synchronous get.
                Storage.instance.getAllPomodoros();
                var dataset:Array = Storage.instance.dataset;
                for each (var pom:Pomodoro in dataset) {
                    if (pom.name == item.name) {
                        // Match (not guaranteed to be unique)
                        var select:PomodoroEvent = new PomodoroEvent(PomodoroEvent.SELECTED);
                        select.pomodoro = pom;
                        PomodoroEventDispatcher.instance.dispatchEvent(select);
                        break;
                    }
                }
            }
        }

        function checkSubmit(event:KeyboardEvent):void {
            switch (event.charCode) {
                case Keyboard.ENTER:
                    fireSubmit(null);
                    break;
                case Keyboard.ESCAPE:
                    exit();
                    break;
            }
        }

        private function exit():void {
            dispatchEvent(new Event("exit"));
            input.text = "";
            estimatedInput.text = "";
        }

        ]]>
    </fx:Script>

    <fx:Metadata>
        [Event(name = "exit", type="flash.events.Event")]
    </fx:Metadata>

    <s:TextInput id="input" left="24" right="40" y="4"
        focusIn="descriptionFocus(event);"
        color="#FFFFFF" fontSize="14" height="24"
        contentBackgroundAlpha="0"/>
    <s:TextInput id="estimatedInput" width="32" right="4" y="4"
        focusIn="estimateFocus(event);"
        color="#FFFFFF" fontSize="14" height="24" maxChars="1" restrict="0-7"
         contentBackgroundAlpha="0"/>

</s:Group>
