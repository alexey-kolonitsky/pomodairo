<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:popup="com.pomodairo.components.popup.*"
	xmlns:components="com.pomodairo.components.*"
	width="320" height="300"
	initialize="init()" horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	backgroundAlpha="0">
	
	<mx:Script>
		<![CDATA[
		import com.pomodairo.EmbedImages;
		import com.pomodairo.EmbedStyle;
		import com.pomodairo.components.*;
		import com.pomodairo.components.popup.PomoItemInput;

		import mx.collections.ArrayCollection;
		import mx.core.WindowedApplication;
		import mx.events.PropertyChangeEvent;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;

		import com.pomodairo.events.PomodoroEvent;
		import com.pomodairo.core.PomodoroEventDispatcher;
		import com.pomodairo.data.Pomodoro;
		import com.pomodairo.core.TaskManager;
		import com.pomodairo.TableUtils;
		import com.pomodairo.core.Storage;

		[Bindable]
		private var db:Storage = Storage.instance;

		[Bindable]
		private var taskMenu:NativeMenu = new NativeMenu();

		private var taskManager:TaskManager = TaskManager.instance;

		private var eventDispatcher:PomodoroEventDispatcher = PomodoroEventDispatcher.instance;

		override protected function keyUpHandler(event:KeyboardEvent):void {
			switch (event.keyCode) {
				case Keyboard.F2:
				case Keyboard.E:
					showName();
					break;

				case Keyboard.C:
//					onCopyPomodoroClicked();
					break;

				case Keyboard.INSERT:
					onAddPomodoroClicked();
					break;

				case Keyboard.DELETE:
//					onRemovePomodoroClicked();
					break;
			}
		}


		private function init():void {
			db.initAndOpenDatabase();
			list.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
			db.addEventListener(Storage.DATASET_CHANGED, dataset_changedHandler);
			list.dataProvider = new ArrayCollection(db.dataset);

			eventDispatcher.addEventListener(PomodoroEvent.NEXT_TASK_SELECTED, onNextTaskSelected);
		}

		private function onNextTaskSelected(event:PomodoroEvent):void {
			for (var i:int = 0; i < list.dataProvider.length; i++) {
				var item:Pomodoro = list.dataProvider.getItemAt(i) as Pomodoro;
				if (event.pomodoro.id == item.id) {
					list.selectedIndex = i;
					return;
				}
			}
		}

		private function dataset_changedHandler(event:Event):void {
			list.dataProvider = new ArrayCollection(db.dataset);
		}

		private function onDragComplete(event:Event):void {
			updatePrios();
		}

		private function updatePrios():void {
			var i:int = list.selectedIndex - 1;
			for each (var pom:Pomodoro in list.dataProvider) {
				pom.ordinal = i--;
				db.updateOrdinal(pom);
			}
		}


		private function onAddPomodoroClicked(event:Event = null):void {
			var input:PomoItemInput = new PomoItemInput();
			input.type = Pomodoro.TYPE_POMODORO;
			input.selectAfterCreate = true;
			PopUpManager.addPopUp(input, this, true);
			PopUpManager.centerPopUp(input);
		}

		private function onStartPomodoroClicked(event:Event = null):void {
			var pom:Pomodoro = list.selectedItem as Pomodoro;
			if (pom) {
				PomodoroEventDispatcher.instance.pomodoroSelected(pom);
				trace("Pomodoro selected: " + pom.name);
//				interruptionButton.enabled = true;
			} else {
				trace("TaskListCanvas onStartPomodoroClicked pomodoro not selected");
			}
		}

		private function findNextTask():void {
			var result:Boolean = taskManager.nextTask();
			if (result == false) {
				var emptyListEvent:PomodoroEvent = new PomodoroEvent(PomodoroEvent.LIST_EMPTY);
				PomodoroEventDispatcher.instance.dispatchEvent(emptyListEvent);
			}
		}

		private function onClosePomodoroClicked(event:Event = null):void {
			for each (var pom:Pomodoro in db.dataset) {
				if (pom.done) {
					pom.visible = false;
					db.updateVisibility(pom);
				}
			}
		}

		public function copyTableToClipboard(event:Event = null):void {
			var data:Array = db.dataset;
			var tmpString:String = new TableUtils().getPomodorosTableAsCsv(data);
			System.setClipboard(tmpString);
		}

		private function showName():void {
			var pom:Pomodoro = list.selectedItem as Pomodoro;
			if (pom == null) {
				trace("WARNING: TaskListCanvas.onEditPomodoroClicked: Pomodoro is not selected");
				return;
			}
			var input:PomodoroEditor = new PomodoroEditor();
			input.type = Pomodoro.TYPE_EDIT;
			input.selectAfterCreate = true;
			input.pomodoro = pom;
			PopUpManager.addPopUp(input, this, true);
			PopUpManager.centerPopUp(input);
		}
//
//		private function newInterruption():void {
//			var input:PomoItemInput = new PomoItemInput();
//			input.type = Pomodoro.TYPE_INTERRUPTION;
//			input.reference = taskManager.activeTask;
//			PopUpManager.addPopUp(input, this, true);
//			PopUpManager.centerPopUp(input);
//		}
//
//		private function newUnplanned():void {
//			var input:PomoItemInput = new PomoItemInput();
//			input.type = Pomodoro.TYPE_UNPLANNED;
//			input.reference = taskManager.activeTask;
//			PopUpManager.addPopUp(input, this, true);
//			PopUpManager.centerPopUp(input);
//		}
		]]>
	</mx:Script>

	<s:BorderContainer height="32" width="100%"
		backgroundColor="{EmbedStyle.SECTION_BACKGROUND_COLOR}"
		borderVisible="false">
		<s:filters>
			<s:DropShadowFilter distance="3" angle="90" color="0x000000" />
		</s:filters>
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>
		<s:Label text="TODO"
			color="{EmbedStyle.SECTION_TEXT_COLOR}"
			fontWeight="bold"
			verticalAlign="middle"
			paddingLeft="4" />

		<mx:Label id="labelDates" text="{pomodoroInput.currentText}" color="{EmbedStyle.COMMON_TEXT_COLOR}" />
		<s:Spacer width="100%" />
		<mx:Button id="clearButton"
			click="onClosePomodoroClicked()"
			toolTip="Clear visibility" enabled="true"
			height="32" width="32"
			icon="{EmbedImages.ICON_CLEANING_CLASS}"/>
	</s:BorderContainer>

	<s:BorderContainer top="32" right="0" left="0" height="32"
					   backgroundColor="{EmbedStyle.SECTION_BACKGROUND_COLOR}"
					   borderVisible="false">

		<components:PomodoroInput id="pomodoroInput" width="100%" />

	</s:BorderContainer>



	<s:List id="list"
		top="64" right="0" bottom="0" left="0"
		contentBackgroundAlpha="0"
		doubleClickEnabled="true"
		borderVisible="false"
		doubleClick="{showName()}"
        itemRenderer="com.pomodairo.lists.renderers.PomodoroListRenderer"
		click="onStartPomodoroClicked(event);"
		dragMoveEnabled="true"
		dragComplete="onDragComplete(event)">
	</s:List>


</mx:Canvas>