<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:s="library://ns.adobe.com/flex/spark"
	width="320" height="300"
    initialize="init()" horizontalScrollPolicy="off"
    verticalScrollPolicy="off"
    backgroundAlpha="0">
	
	<mx:Script>
		<![CDATA[
		import com.pomodairo.EmbedImages;
		import com.pomodairo.EmbedStyle;
		import com.pomodairo.components.*;

		import mx.collections.ArrayCollection;
		import mx.core.WindowedApplication;
		import mx.events.PropertyChangeEvent;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;

		import com.pomodairo.events.PomodoroEvent;
		import com.pomodairo.PomodoroEventDispatcher;
		import com.pomodairo.Pomodoro;
		import com.pomodairo.TaskManager;
		import com.pomodairo.TableUtils;
		import com.pomodairo.db.Storage;

		[Bindable]
		private var db:Storage = Storage.instance;

		[Bindable]
		private var taskMenu:NativeMenu = new NativeMenu();

		[Bindable]
		public var app:WindowedApplication;

		private var taskManager:TaskManager = TaskManager.instance;

		override protected function keyUpHandler(event:KeyboardEvent):void {
			switch (event.keyCode) {
				case Keyboard.F2:
				case Keyboard.E:
					showName();
					break;

				case Keyboard.C:
//					onCopyPomodoroClicked();
					break;

				case Keyboard.INSERT:
					onAddPomodoroClicked();
					break;

				case Keyboard.DELETE:
//					onRemovePomodoroClicked();
					break;
			}
		}


		private function init():void {
			db.initAndOpenDatabase();
			list.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
			db.addEventListener(Storage.DATASET_CHANGED, dataset_changedHandler);
			list.dataProvider = new ArrayCollection(db.dataset);
		}

		private function dataset_changedHandler(event:Event):void {
			list.dataProvider = new ArrayCollection(db.dataset);
		}

		private function onUsersDataGridChanged(event:Event):void {
		}

		private function onDragComplete(event:Event):void {
			updatePrios();
		}

		private function updatePrios():void {
			var i:int = list.selectedIndex - 1;
			for each (var pom:Pomodoro in list.dataProvider) {
				pom.ordinal = i--;
				db.updateOrdinal(pom);
			}
		}


		private function onAddPomodoroClicked(event:Event = null):void {
			var input:PomoItemInput = new PomoItemInput();
			input.type = Pomodoro.TYPE_POMODORO;
			input.selectAfterCreate = true;
			PopUpManager.addPopUp(input, this, true);
			PopUpManager.centerPopUp(input);
		}

		private function onStartPomodoroClicked(event:Event = null):void {
			var pom:Pomodoro = list.selectedItem as Pomodoro;
			if (pom) {
				var evt:PomodoroEvent = new PomodoroEvent(PomodoroEvent.SELECTED);
				evt.pomodoro = pom;
				PomodoroEventDispatcher.instance.dispatchEvent(evt);
				onPomodoroSelected(evt);
			} else {
				trace("TaskListCanvas onStartPomodoroClicked pomodoro not selected");
			}
		}

		private function findNextTask():void {
			var result:Boolean = taskManager.nextTask();
			if (result == false) {
				var emptyListEvent:PomodoroEvent = new PomodoroEvent(PomodoroEvent.LIST_EMPTY);
				PomodoroEventDispatcher.instance.dispatchEvent(emptyListEvent);
			}
		}

		private function onClosePomodoroClicked(event:Event = null):void {
			for each (var pom:Pomodoro in db.dataset) {
				if (pom.done) {
					pom.visible = false;
					db.updateVisibility(pom);
				}
			}
		}

		public function copyTableToClipboard(event:Event = null):void {
			var data:Array = db.dataset;
			var tmpString:String = new TableUtils().getPomodorosTableAsCsv(data);
			System.setClipboard(tmpString);
		}

		private function showName():void {
			var pom:Pomodoro = list.selectedItem as Pomodoro;
			if (pom == null) {
				trace("WARNING: TaskListCanvas.onEditPomodoroClicked: Pomodoro is not selected");
				return;
			}
			var input:PomodoroEditor = new PomodoroEditor();
			input.type = Pomodoro.TYPE_EDIT;
			input.selectAfterCreate = true;
			input.pomodoro = pom;
			PopUpManager.addPopUp(input, this, true);
			PopUpManager.centerPopUp(input);
		}

		private var clickX:Number;
		private var clickY:Number;
		private var isResizing:Boolean;
		private var windowOriginHeight:Number;

		private var cursorId:int;

		private function resizeLine_mouseDownHandler(event:MouseEvent):void {
			clickX = event.stageX;
			clickY = event.stageY;
			stage.addEventListener(MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler)
			stage.addEventListener(MouseEvent.MOUSE_UP, stage_mouseUpHandler);
		}

		private function stage_mouseUpHandler(event:MouseEvent):void {
			stage.removeEventListener(MouseEvent.MOUSE_UP, stage_mouseUpHandler);
			stage.removeEventListener(MouseEvent.MOUSE_MOVE, stage_mouseMoveHandler);
			clickX = 0.0;
			clickY = 0.0;
			windowOriginHeight = 0.0;
			isResizing = false;
			setDefaultCursor();
		}

		private function stage_mouseMoveHandler(event:MouseEvent):void {
			var dy:Number = event.stageY - clickY;
			if (dy * dy > 25 && isResizing == false) {
				isResizing = true;
				windowOriginHeight = app.nativeWindow.height;
			}

			if (isResizing) {
				app.nativeWindow.height = windowOriginHeight + dy;
			}
		}

		[Embed(source="/style/kingnarestyle.swf", symbol="DividedBox_verticalCursor")]
		public static const ResizeCursorClass:Class;

		private function resizeLine_rollOverHandler(event:MouseEvent):void {
			cursorId = cursorManager.setCursor(ResizeCursorClass);
		}

		private function resizeLine_rollOutHandler(event:MouseEvent):void {
			if (isResizing == false) {
				setDefaultCursor();
			}
		}

		private function setDefaultCursor():void {
			cursorManager.removeAllCursors();
			cursorId = -1;
		}

		private function newInterruption():void {
			var input:PomoItemInput = new PomoItemInput();
			input.type = Pomodoro.TYPE_INTERRUPTION;
			input.reference = taskManager.activeTask;
			PopUpManager.addPopUp(input, this, true);
			PopUpManager.centerPopUp(input);
		}

		private function newUnplanned():void {
			var input:PomoItemInput = new PomoItemInput();
			input.type = Pomodoro.TYPE_UNPLANNED;
			input.reference = taskManager.activeTask;
			PopUpManager.addPopUp(input, this, true);
			PopUpManager.centerPopUp(input);
		}

		private function onPomodoroSelected(event:PomodoroEvent):void {
			trace("Pomodoro selected: " + event.pomodoro.name);
//			unplannedButton.enabled = true;
			interruptionButton.enabled = true;

		}

        [Bindable]
        public var lastRollOverIndex:int;
		]]>
	</mx:Script>

	<s:BorderContainer height="32" width="100%"
		backgroundColor="{EmbedStyle.SECTION_BACKGROUND_COLOR}"
		borderVisible="false">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>
		<s:Label text="TODO"
			color="{EmbedStyle.SECTION_TEXT_COLOR}"
			fontWeight="bold"
			verticalAlign="middle"
			paddingLeft="4" />
		<s:Spacer width="100%" />
		<mx:Button id="addPomoButton"
			click="onAddPomodoroClicked()"
			toolTip="Add new task"
			height="32" width="32"
			icon="{EmbedImages.ICON_PLUS_CLASS}" />
		<mx:Button id="clearButton"
			click="onClosePomodoroClicked()"
			toolTip="Clear visibility" enabled="true"
			height="32" width="32"
			icon="{EmbedImages.ICON_CLEANING_CLASS}"/>
		<mx:Button id="interruptionButton"
			label="Interruption"
			click="newInterruption()"
			toolTip="Add interruption"
			enabled="false"
			height="32"/>
	</s:BorderContainer>

	<s:List id="list"
		top="32" right="0" bottom="44" left="0"
		contentBackgroundAlpha="0"
		doubleClickEnabled="true"
		borderVisible="false"
		doubleClick="{showName()}"
        itemRenderer="com.pomodairo.components.PomodoroListRenderer"
		itemRollOver="{lastRollOverIndex = event.itemIndex}"
		click="onStartPomodoroClicked(event);"
		dragMoveEnabled="true"
		dragComplete="onDragComplete(event)"
		change="onUsersDataGridChanged(event)" width="100%">
	</s:List>

	<mx:Canvas id="resizeLine" bottom="0" left="0" right="0" height="44"
		backgroundColor="0xFFFFFF" backgroundAlpha="0.2"
		mouseDown="resizeLine_mouseDownHandler(event)"
		rollOver="resizeLine_rollOverHandler(event)"
		rollOut="resizeLine_rollOutHandler(event)"/>


</mx:Canvas>