<?xml version="1.0" encoding="utf-8"?>
<config:BaseConfigPanel
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:config="com.pomodairo.components.config.*"

	creationComplete="init()">


	<fx:Script>
        <![CDATA[
        	import com.pomodairo.PomodoroEventDispatcher;
        	import com.pomodairo.db.Storage;
        	import com.pomodairo.events.ConfigurationUpdatedEvent;
			import com.pomodairo.events.TodoistError;
			import com.pomodairo.events.TodoistEvent;
			import com.pomodairo.todoist.TodoistClient;

			import mx.controls.Alert;


			public static const MSG_ERROR_LOGIN:String = "Wrong login data. Check you login and password and try again";
			public static const MSG_INVALID_LOGIN:String = "Login and password can't be empty";

			//-------------------------
			// Panel States
			//-------------------------

			public static const DISABLED:String = "disabled";
			public static const LOGIN:String = "login.normal";
			public static const LOGIN_PROCESS:String = "login.process";
			public static const LOGIN_FAIL:String = "login.fail";
			public static const LOGIN_INVALID:String = "login.invalid";
			public static const CONFIG:String = "config.normal";
			public static const CONFIG_CHANGED:String = "config.changed";
			public static const CONFIG_SAVING:String = "config.saving";

			//-------------------------
			// Stored Fields IDs
			//-------------------------

        	public static const ENABLED:String = "todoist.enabled";
			public static const USERNAME:String = "todoist.username";
			public static const PASSWORD:String = "todoist.password";
			public static const PROJECT:String = "todoist.project";

			//-------------------------
			// Stored Fields
			//-------------------------

        	private var todoistEnabled:Boolean = false;
        	private var todoistUsername:String;
			private var todoistPassword:String;
			private var defaultProject:int;

			private var client:TodoistClient;
			private var state:String;

        	private function init():void
        	{
        		populate();
				initClient();
        	}

        	override public function populate():void
        	{
        		var props:Dictionary = Storage.instance.config;

        		if (props[ENABLED] != null) {
        			todoistEnabled = props[ENABLED] == "true";
					enabledCheckbox.selected = todoistEnabled;
				}

				if (props[USERNAME] != null) {
					todoistUsername = props[USERNAME];
					loginName.text = todoistUsername;
				}

				if (props[PASSWORD] != null) {
					todoistPassword = props[PASSWORD];
					loginPassword.text = todoistPassword;
				}

				if (props[PROJECT] != null) {
					defaultProject = parseInt(props[PROJECT]);
					projectList.selectedItem = defaultProject;
				}
        	}

            override public function notifyConfiguration():void
            {
            	// Notify the world
            	PomodoroEventDispatcher.getInstance().dispatchEvent(new ConfigurationUpdatedEvent(ConfigurationUpdatedEvent.UPDATED, ENABLED, ""+todoistEnabled));
            }

			private function initClient():void
			{
				client = new TodoistClient();
				client.addEventListener(TodoistEvent.CONNECTED, client_connectedHandler);
				client.addEventListener(TodoistError.ERROR_LOGIN, client_errorHandler);

				if (todoistEnabled) {
					state = LOGIN;
					client.connect(todoistUsername, todoistPassword);
				} else {
					state = DISABLED;
				}
				updateState();
			}

			private function updateState():void
			{
				saveButton.visible = false;
				loginButton.visible = false;
				todoistLoginForm.visible = false;
				promptLabel.visible = false;
				todoistConfigForm.visible = false;
				loginWrongBox.visible = false;
				loginWrongBox.includeInLayout = false;

				switch (state)
				{
					case DISABLED:
						promptLabel.visible = true;
						break;

					case LOGIN_INVALID:
						loginName.enabled = true;
						loginName.text = todoistUsername;
						loginPassword.text = todoistPassword;
						loginPassword.enabled = true;
						loginButton.visible = true;
						todoistLoginForm.visible = true;
						loginWrongBox.visible = true;
						loginWrongBox.includeInLayout = true;
						loginWrongMessage.text = MSG_ERROR_LOGIN;
						break;

					case LOGIN_FAIL:
						loginName.enabled = true;
						loginName.text = todoistUsername;
						loginPassword.text = todoistPassword;
						loginPassword.enabled = true;
						loginButton.visible = true;
						todoistLoginForm.visible = true;
						loginWrongBox.visible = true;
						loginWrongBox.includeInLayout = true;
						loginWrongMessage.text = MSG_ERROR_LOGIN;
						break;

					case LOGIN:
						loginName.enabled = true;
						loginName.text = todoistUsername;
						loginPassword.enabled = true;
						loginPassword.text = todoistPassword;
						loginButton.visible = true;
						todoistLoginForm.visible = true;
						break;

					case LOGIN_PROCESS:
						loginName.text = todoistUsername;
						loginName.enabled = false;
						loginPassword.text = todoistPassword;
						loginPassword.enabled = false;
						loginButton.visible = true;
						todoistLoginForm.visible = true;
						break;

					case CONFIG:
					case CONFIG_CHANGED:
					case CONFIG_SAVING:
						saveButton.visible = true;
						todoistConfigForm.visible = true;
						break;
				}
			}

			private function login():void
			{
				todoistUsername = loginName.text;
				todoistPassword = loginPassword.text;

				var isValid:Boolean = validateLoginForm();

				if (isValid) {
					state = LOGIN_PROCESS;
					client.connect(todoistUsername, todoistPassword);
				} else {
					state = LOGIN_INVALID;
				}

				updateState();
			}


			public function save():void
		    {
				todoistEnabled = enabledCheckbox.selected;

				Storage.instance.setConfigurationValue(ENABLED, ""+todoistEnabled);
				exit();

				notifyConfiguration();
		    }

			private function onEnabledChanged(event:Event):void
			{
				todoistEnabled = enabledCheckbox.selected;

				if (todoistEnabled) {
					state = LOGIN;
				} else {
					client.disconnect();
					state = DISABLED;
				}

				updateState();
			}

			private function client_connectedHandler(event:TodoistEvent):void
			{
				client.getItems();
			}

			private function client_itemsHandler(event:TodoistEvent):void
			{
				trace("TodoistConfigPanel items count: " + client.items);
			}

			private function client_errorHandler(event:TodoistError):void
			{
				switch (event.type) {
					case TodoistError.ERROR_LOGIN:
						state = LOGIN_FAIL;
						break;
				}

				updateState();
			}

			private function validateLoginForm():Boolean
			{
				if (loginName.text == null || loginName.text == "")
					return false;

				if (loginPassword.text == null || loginPassword.text == "")
					return false;

				return true;
			}



        ]]>
    </fx:Script>

	<mx:CheckBox id="enabledCheckbox" x="8" y="8" label="Use Todoist"
		change="onEnabledChanged(event)"/>

	<mx:Text id="promptLabel"
		text="Todoist allow you to load your tasks and adit them from pomodairo interface"
		left="8" top="32" right="8" height="80"/>

	<s:VGroup id="todoistLoginForm" left="8" top="32" right="8" gap="0">

		<s:BorderContainer id="loginWrongBox" width="100%" backgroundColor="#ff5b47" color="#ffffff" borderVisible="false">
			<mx:Label id="loginWrongMessage" width="100%"/>
		</s:BorderContainer>

		<mx:Label id="loginTitleLabel" width="100%"
			text="Login"/>

		<mx:TextInput id="loginName" width="100%"
			text="Login name"/>

		<mx:TextInput id="loginPassword" width="100%"
			displayAsPassword="true"
			text="Login password"/>

	</s:VGroup>

	<s:VGroup id="todoistConfigForm" left="8" top="32" right="8" gap="0">

		<mx:Label text="Select project to add taskt from it" width="100%" />

		<mx:List id="projectList" width="100%" />

	</s:VGroup>

	<mx:Button id="saveButton" right="80" bottom="8" width="64" label="Save" click="save()" />
	<mx:Button id="loginButton" right="80" bottom="8" width="64" label="Login" click="login()" />
	<mx:Button id="exitButton" right="10" bottom="10" width="64" label="Cancel" click="exit()"/>
	
</config:BaseConfigPanel>
